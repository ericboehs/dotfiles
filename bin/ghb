#! /usr/bin/env ruby

# Interface with workflows using `gh` CLI for the current branch
class GitHubBranch
  WORKFLOW = ENV.fetch 'GHB_WORKFLOW', 'Code Checks'

  # List the latest runs for the current branch.
  def list
    system %{
      gh api "repos/{owner}/{repo}/actions/runs?branch=#{branch_name}&per_page=75" |
      jq -r '
        ["STATUS", "CONCLUSION", "MESSAGE", "EVENT", "ID", "CREATED"],
        (.workflow_runs[] | select(.name == "#{WORKFLOW}") | [.status, .conclusion // "-", (.head_commit | .message)[0:25], .event, .id, .created_at]) |
        @tsv
      ' |
      column -ts $'\t' |
      head -11
    }
  end

  # Rerun the latest run for the current branch.
  def rerun
    system %{CLICOLOR_FORCE=1 gh run rerun #{run_id} #{extra_args}}
  end

  # View the latest run for the current branch.
  def view
    system %{CLICOLOR_FORCE=1 gh run view #{run_id} #{extra_args}}
  end

  # View the failure logs for the current branch.
  def logs
    system %{CLICOLOR_FORCE=1 gh run view #{run_id} --log-failed #{extra_args}}
  end

  # View the failure logs after the first match of "Failures:".
  def failures
    system %{CLICOLOR_FORCE=1 gh run view #{run_id} --log-failed #{extra_args} | grep -A10000 Failures:}
  end

  # Watches the in-progress workflow for the current branch.
  def watch
    raise 'No runs in progress.' if check_run_id == ""

    title = "GitHub Workflow - #{WORKFLOW}"
    noti_pass = %{noti -t "#{title}" -m "✅ #{branch_name} Passed"}
    noti_fail = %{noti -t "#{title}" -m "❌ #{branch_name} Failed"}

    system %{CLICOLOR_FORCE=1 gh run watch #{check_run_id} --exit-status #{extra_args} && #{noti_pass} || #{noti_fail}}
  end

  # Returns each method in the defined order and the comment before its definition.
  def help
    file = File.readlines __FILE__
    methods = self.class.instance_methods false
    methods_with_line_numbers_sorted = methods.map { |m| [method(m).source_location.last, m] }.sort_by(&:first)
    longest_method_length = methods.max_by(&:length).length

    methods_with_line_numbers_sorted.map do |line_number, m|
      comment = file[line_number - 2].split('#').last
      method_name_left_justified_for_alignment = m.to_s.ljust longest_method_length

      [method_name_left_justified_for_alignment, comment].join "\t"
    end
  end

  private

  def run_id
    @run_id ||= (
      jq_workflow_select_cmd = %{jq -r '[.workflow_runs[] | select(.name == "#{WORKFLOW}")][0].id'}
      `gh api "repos/{owner}/{repo}/actions/runs?branch=#{branch_name}" | #{jq_workflow_select_cmd}`.chomp
    )
  end

  def check_run_id
    @check_run_id ||= (
      workflow = WORKFLOW.downcase.gsub ' ', '_'
      grep_id_cmd = %{grep "#{branch_name}" | grep in_progress | head -1 | awk -F '\t' '{print $7}'}

      `gh run list --workflow #{workflow}.yml | #{grep_id_cmd}`.chomp
    )
  end

  def branch_name
    @branch_name ||= `git branch --show-current`.chomp
  end

  # Make unknown commands a little more human readable.
  def inspect
    File.basename $0, File.extname($0)
  end

  def extra_args
    ARGV[1..-1].join ' '
  end
end

Signal.trap('SIGINT') { exit 1 }

begin
  command = ARGV[0]&.gsub '-', '_'
  output = GitHubBranch.new.send command || 'help'
  puts output unless output == true
rescue => e
  $stderr.puts e.message
  exit 1
end
